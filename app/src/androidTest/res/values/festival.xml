<resources>
    <string name="app_name">Test Festival</string>
    <string name="festival_name">Test Festival 1</string>
    <string name="festival_hashtag">testfestival</string>
    <string name="festival_website_url">https://www.cambridgebeerfestival.com/</string>
    <string formatted="false" name="share_intent_subject">Drinking a %1$s at the %2$s</string>
    <string formatted="false" name="share_intent_text">Drinking %1$s %2$s</string>
    <string name="beer_list_url">data:application/json;base64,{
    "producers": [
        {
            "id": "827bfc458708f0b442009c9c9836f7e4b65557fb",
            "name": "Adnams",
            "notes": "Southwold, Suffolk est. 1890",
            "products": [
                {
                    "id": "ef2afd226e3384e34d9833fe09cd123db498754c",
                    "name": "Broadside",
                    "style": "Bitter",
                    "notes": "Brewed with Pale Ale malt and First Gold hops, Broadside is a dark ruby red beer rich in fruitcake aromas, almonds and conserved fruit.",
                    "abv": "4.7",
                    "status_text": "Sold Out"
                },
                {
                    "id": "fcbe5b62ba083df3ccf2c3a127ec1ce3ef8fe635",
                    "name": "Cambridge Beer Festival Special",
                    "style": "Stout",
                    "notes": " A one-off, black stout, aged in oak casks previously occupied by Adnams Copper House Distillery's North Cove Vodka. This additional maturation has imparted flavours of vanilla, coffee and chocolate. Warming with a dry finish.",
                    "abv": "6.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "654c1676d93b0887a95e25fb8d9bb11f91f93780",
                    "name": "Fat Sprat",
                    "style": "Bitter",
                    "notes": "A pale amber summer beer with a lovely citrus, grapefruit aroma and some spicy notes. On the palate, the citrus character of the hops shines through, balanced with a light biscuit flavour and a crisp, dry finish.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "99f1656c0a34c5664b01116914ada95ffa992028",
                    "name": "Ghost Ship",
                    "style": "Golden Ale",
                    "notes": "This pale ale has a good assertive pithy bitterness and a malty backbone. It is brewed with a selection of malts -- Pale Ale, Rye Crystal and Cara. Citra and a blend of other American hop varieties create some great citrus flavours.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "39b18992a230a6a3c74c6b5c1803497e0929d440",
                    "name": "Mosaic",
                    "style": "Golden Ale",
                    "notes": "Made with Mosaic hops, this pale blonde has bags of personality with bold mango, peach, lemon and pine flavours and a dry hoppy finish.",
                    "abv": "4.1",
                    "status_text": "Sold Out"
                },
                {
                    "id": "43814346e21444aaf4f70841bf7ed5ae93f55a9d",
                    "name": "Southwold Bitter",
                    "style": "Bitter",
                    "notes": "A beautiful copper-coloured beer, late- and dry-hopped with Fuggles for a distinctive, lingering hoppiness. Brewed with the finest East Anglian malted barley, sourced locally to the brewery.",
                    "abv": "3.7",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "5f6955d227a320c7f1f6c7da2a6d96a851a8118f",
            "name": "Arbor Ales",
            "notes": "Lawrence Hill, Bristol est. 2007",
            "products": [
                {
                    "id": "74eb4cb32246ed6ececad0e0d13efe5c81080896",
                    "name": "Greenhorn Rising",
                    "style": "IPA",
                    "notes": "Amber in colour with citrus, floral and pine aromas. Grapefruit and tropical fruit flavours are balanced by some caramel sweetness. Peppery bitterness lingers on the finish.",
                    "abv": "5.2",
                    "status_text": "Sold Out"
                },
                {
                    "id": "9d215ff1a41b6d0cc1cf48605e303ab880888cd9",
                    "name": "Motueka",
                    "style": "Bitter",
                    "notes": "A pale hoppy session beer brewed with Motueka hops. It has flavours and aromas of tropical fruit and sweet citrus with a delicate bitter finish.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "f76b2ea6b45eff3bc8e4399145cc17a0601f5c8d",
            "name": "Arran",
            "notes": "Cladach, Arran est. 2000",
            "products": [
                {
                    "id": "86970064ea53b6d66b7c53cbc91c58b4f06fc6fd",
                    "name": "Arran Dark",
                    "style": "Dark Mild",
                    "notes": "A well-balanced malty beer with plenty of roast and hop in the taste and a dry, bitter finish.",
                    "abv": "4.3",
                    "status_text": "Plenty left"
                },
                {
                    "id": "a1773d62a609dd09e98ea1aebeddbd949b78bf83",
                    "name": "Blonde",
                    "style": "Golden Ale",
                    "notes": "Aroma is malty, toasted, hoppy and citrusy. Flavour has a malty base with zesty and fruity flavours and a floral hoppy finish.",
                    "abv": "5.0",
                    "status_text": "Plenty left"
                }
            ]
        },
        {
            "id": "64e095fe763fc62418378753f9402623bea9e227",
            "name": "B & T",
            "notes": "Shefford, Beds est. 1982",
            "products": [
                {
                    "id": "4a0e88cf529fbbdc2c0a995bbe88a0a86212ed8d",
                    "name": "Edwin Taylor's Extra Stout",
                    "style": "Stout",
                    "notes": "A pleasant bitter beer with a strong roast malt flavour. Brewed using Pearl Pale and Crystal malts, roast barley and Hercules hops.",
                    "abv": "4.5",
                    "status_text": "Plenty left"
                },
                {
                    "id": "be4d979ef9808e41a6adf3bbefc4331248e88604",
                    "name": "Shefford Mild",
                    "style": "Dark Mild",
                    "notes": "A dark beer with a well balanced, roast malt taste.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "94940e534aedd3f6d9bb77c6322f6641dbb7432a",
            "name": "Bank Top",
            "notes": "Bolton, Lancs est. 1995",
            "products": [
                {
                    "id": "7f204b124163beacdd4e9c3443206592ad6b8430",
                    "name": "Dark Mild",
                    "style": "Dark Mild",
                    "notes": "A full bodied dark mild with hints of liquorice and roast barley.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "2bc4a9de212381b2bbb88945fcc28f65c338b37a",
                    "name": "Flat Cap",
                    "style": "Bitter",
                    "notes": "A light bitter with biscuit malt and fruit flavours.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "356a192b7913b04c54574d18c28d46e6395428ab",
            "name": "Bartrams",
            "notes": "Rougham, Suffolk est. 1999",
            "products": [
                {
                    "id": "8529267bd09088e4166ab6e4e6894c7e1a85928f",
                    "name": "Comrade Bill Bartram's Egalitarian Anti-Imperialist Soviet Stout",
                    "style": "Stout",
                    "notes": "A bold and tasty Russian stout with a mouthfilling, airy texture and a lot of enjoyable, peppery, bitter chocolate flavours.",
                    "abv": "6.9",
                    "status_text": "Sold Out"
                },
                {
                    "id": "337500c249cf413d38006951713d74b69e84d937",
                    "name": "Thy Last Drop",
                    "style": "Porter",
                    "notes": "Based on a traditional London Porter recipe.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "c4cb5175c16b7b45a8dbdefcf378567c5a5c297d",
                    "name": "Tour de Force",
                    "style": "Bitter",
                    "notes": "Trip the light fantastic with a light relief after all that heavy going. With a certain je ne sais quoi.",
                    "abv": "4.1",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "9dbb7f83a82dff4d62f7f5f2c0491527ce35cce8",
            "name": "Bexar County",
            "notes": "Peterborough, Cambs est. 2012",
            "products": [
                {
                    "id": "551a189280c6b5675517fc45eeb1fded13b0823f",
                    "name": "Black Eye",
                    "style": "Stout",
                    "notes": "This extremely hoppy beer pulls no punches and will hit you full force in the face! Little to no aroma masks the brutal assault that your tastes buds will have once you take your first sip. Roasty and hoppy...not for the faint of heart (or palate). Unfined. Brewed in collaboration with Hand Drawn Monkey, Huddersfield.",
                    "abv": "7.3",
                    "status_text": "Sold Out"
                },
                {
                    "id": "d81da83134820edb1f6b3daa994cffed331663f6",
                    "name": "I Am Not a Fruit Beer Too!",
                    "style": "Wheat",
                    "notes": "A slightly soured wheat beer with added beetroot. A classic flavour mix of sweet (from the wheat) and sour, this beer is a perfect thirst quenching ale for the summer months. Unfined.",
                    "abv": "6.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "ba4bb8d3a14c7085fa7cda827585592b2bafae1e",
                    "name": "Ronin",
                    "style": "Speciality",
                    "notes": "Rice, koji, ginger, and sake yeast were all used in brewing this beer. Slightly sweet and very refreshing, it has a lot going on. The finish is long with a slight warming sensation. Unfined. Brewed in collaboration with Hand Drawn Monkey, Huddersfield, and Three Blind Mice, Ely.",
                    "abv": "5.3",
                    "status_text": "Sold Out"
                },
                {
                    "id": "55b7d4037d5f0b4adb90b072bb5115dd3cea06a9",
                    "name": "Texas Pecan Coffee Mild",
                    "style": "Dark Mild",
                    "notes": "A brown non-traditional mild. Pecan coffee imported from Texas is added to complement the mild flavors. Unfined.",
                    "abv": "3.9",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "9f682df245668969bbcd5395bdc2882591eeecde",
            "name": "BlackBar",
            "notes": "Harston, Cambs est. 2011",
            "products": [
                {
                    "id": "edeb38cc1dc622a581d62758caaf3080fcb42d85",
                    "name": "Bitter",
                    "style": "Bitter",
                    "notes": "Malty, tawny brown bitter with a noble hop finish.",
                    "abv": "3.6",
                    "status_text": "A little remaining"
                },
                {
                    "id": "69a65d9cac8ba2a613fe87ae3560cd14c7111778",
                    "name": "Longhair BPA",
                    "style": "Bitter",
                    "notes": "A light copper-hued beer with a big nose of Summit hops and a bittering from British Admiral and Pioneer hops. Full of zesty, effervescent flavours and a great body. ",
                    "abv": "6.2",
                    "status_text": "A little remaining"
                },
                {
                    "id": "5fedffd86f43ac5e3bae5a18a3ae5785e0dca1b8",
                    "name": "Museum Old Ale",
                    "style": "Old Ale",
                    "notes": "",
                    "abv": "4.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "85f4b8dd4455a2ae94ba703af789359f03ae71a6",
                    "name": "Theory 143",
                    "style": "Bitter",
                    "notes": "Dark red malty comfort beer.",
                    "abv": "5.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "acf1fffc01dc0193aa07d0b1de723c292a2c826d",
            "name": "Brentwood",
            "notes": "Brentwood, Essex est. 2006",
            "products": [
                {
                    "id": "43bc63c6806ee2b21ad8327c4bf13215b3254346",
                    "name": "BBC 2",
                    "style": "Bitter",
                    "notes": "A true session pale ale; a full body and malty flavours make this beer very deceptive. American hops give it a tropical fruit and citrus punch.",
                    "abv": "2.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "2c9a62c3748f484690d547c0d707aededf04fbd2",
                    "name": "Brentwood Best",
                    "style": "Bitter",
                    "notes": "A traditional, light-coloured best bitter with a well-rounded flavour and aroma.",
                    "abv": "4.2",
                    "status_text": "Sold Out"
                },
                {
                    "id": "300122350a32530a2c2103b46ed07eacdc82aff8",
                    "name": "Brentwood Blonde",
                    "style": "Golden Ale",
                    "notes": "",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "2f9f705a38307c470e3a819ac1f6df7a7fa0ffbc",
                    "name": "Brentwood Gold",
                    "style": "Golden Ale",
                    "notes": "",
                    "abv": "4.3",
                    "status_text": "Sold Out"
                },
                {
                    "id": "0d9f7dddfa136f4e8a4b8f6313f27a23618f699d",
                    "name": "Chockwork Orange",
                    "style": "Old Ale",
                    "notes": "A deep chocolate malty beer brewed with oranges to give it that extra pizazz and matured to provide a classic old ale style beer.",
                    "abv": "6.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "42e63f0b1004bb8182523d11264eabbfca64d66c",
                    "name": "Marvellous Maple Mild",
                    "style": "Dark Mild",
                    "notes": "A dark brown mild with a hint of maple syrup.",
                    "abv": "3.7",
                    "status_text": "Sold Out"
                },
                {
                    "id": "cbba4cb7b82c83e3819ee56a7677b61983585af8",
                    "name": "Summer Virgin",
                    "style": "Golden Ale",
                    "notes": "A light golden ale with American hops creating a refreshing citrus pint.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "3a2dc677d8e85ac856541744e288d504882feb36",
            "name": "Bristol Beer Factory",
            "notes": "Bristol est. 2003",
            "products": [
                {
                    "id": "b0df0c7b50af9a36ec6808ccd6c3fcf3922edabf",
                    "name": "Milk Stout",
                    "style": "Stout",
                    "notes": "Dark creamy stout, reviving an old Bristol tradition. Black in colour with a creamy mouthfeel.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "c343bb3dc68455c1bf2b4f552b42b856448de73e",
                    "name": "Nova",
                    "style": "Bitter",
                    "notes": "A light malt base: Maris Otter, Carapils and wheat malt allows the bright, fresh and zesty hop aromas to shine, underpinned by herbal and floral notes.",
                    "abv": "3.8",
                    "status_text": "A little remaining"
                }
            ]
        },
        {
            "id": "0588f59014485510aac3bd9fdc2695c7b2a0d559",
            "name": "Brodie's",
            "notes": "London est. 2008",
            "products": [
                {
                    "id": "c0213becde6fed20e23a18287accedd4661596e7",
                    "name": "Citra",
                    "style": "Golden Ale",
                    "notes": "Hoppy session beer brewed with Citra hops. Flavours and aromas of pineapples and mangoes with a light mouthfeel.",
                    "abv": "3.1",
                    "status_text": "Sold Out"
                },
                {
                    "id": "0afa8c517fe3bf583538a57e2f1291a8e91b1bdf",
                    "name": "Old Street Pale",
                    "style": "Bitter",
                    "notes": "Medium sweet American pale ale. A strong zesty citrus flavour with a fairly sweet finish, along with sticky pine, grass and toast notes.",
                    "abv": "5.0",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "8157eff8389a499cc91e0a86a185f46ea99aa5d5",
            "name": "Broughton",
            "notes": "Broughton, Biggar est. 1980",
            "products": [
                {
                    "id": "619dbcc45b6ea77df8299f7e61ff5ab78d9474d1",
                    "name": "Exciseman's 80/-",
                    "style": "Porter",
                    "notes": "The bittersweet blend of flavours is derived from the crystal, black and pale ale malts, and fresh, aromatic hops. Dark amber in colour, toffee aromas and full-bodied.",
                    "abv": "4.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "7a6fa987ce6ff76bdf1b930e01443979c7dd4d74",
                    "name": "Greenmantle",
                    "style": "Dark Mild",
                    "notes": "A brown bittersweet ale, with licorice aromas and a lightly bitter aftertaste.",
                    "abv": "3.9",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "77de68daecd823babbb58edb1c8e14d7106e83bb",
            "name": "Buntingford",
            "notes": "Royston, Herts est. 2001",
            "products": [
                {
                    "id": "47b7dcb2355b8391b095376fb67c72ff5567af51",
                    "name": "Highwayman",
                    "style": "Bitter",
                    "notes": "Light brown session bitter.",
                    "abv": "3.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "8ec3d1f620fb27a0172e9ec7fce64b372c728656",
                    "name": "Single Hop 'Triskel'",
                    "style": "Golden Ale",
                    "notes": "The single hop is Triskel, a French hop from the Alsace region, fresh grapefruit and slight lemony sharpness with a bitter hop finish.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "83b84c4e157eee972abbaa81a99395c3b7c6d367",
            "name": "Burning Sky",
            "notes": "Firle, E. Sussex est. 2013",
            "products": [
                {
                    "id": "ec0ba47eed1232a554b54430c3405cc56d832277",
                    "name": "Devil's Rest",
                    "style": "IPA",
                    "notes": "Deceptively drinkable, with a burnt orange colour and full flavour in the mouth. Huge amounts of Simcoe & Centennial hops find their way into the kettle, with even more sneaking in post fermentation for a 'proper' IPA flavour.",
                    "abv": "7.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "ade42459979d7aebdd8c4c1c1e2e75356195f257",
                    "name": "Plateau",
                    "style": "Bitter",
                    "notes": "Pale gold in colour, with a crisp malt edge and sharp bitterness. Plateau has been hopped at different stages of the brew, with a big mix of US & NZ hops to satisfy the discerning drinker.",
                    "abv": "3.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "af7166a5d6ddde19c3a7fd202d93ee963ea22132",
            "name": "Buxton",
            "notes": "Buxton, Derbyshire est. 2010",
            "products": [
                {
                    "id": "91062d76c0cfb527d2787fdb755379c96d67e6ae",
                    "name": "American Rye",
                    "style": "Speciality",
                    "notes": "A shed-load of American hops provide a delightful marmalade/citrus bitterness, well balanced by the sweetness of the malt, while delivering a charcteristic peppery rye flavour.",
                    "abv": "4.3",
                    "status_text": "Sold Out"
                },
                {
                    "id": "d7509efa343466a8d1ad517c27d1efe6c6dd3a53",
                    "name": "Axe Edge",
                    "style": "IPA",
                    "notes": "Hopped with Amarillo, Citra and Nelson Sauvin, this beer's complex flavours include mandarin orange, schnapps, pineapple, and juicy tropical fruits. It is warmingly alcoholic with a dry finish.",
                    "abv": "6.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "75dbeede5ade28febc59d2c513c7ca5514e7a736",
                    "name": "Moor Top",
                    "style": "Bitter",
                    "notes": "Hopped with American Chinook hops, this oozes citrus flavour and aroma. Sweetness balanced with a lingering bitter finish backed up with a late grapefruit hit.\n",
                    "abv": "3.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "838ab2376ca62b79a880f486421575722ee00c46",
                    "name": "Rednik Stout",
                    "style": "Stout",
                    "notes": "Deep brown/black in colour. Aromas of burnt roast coffee, malty molasses, prunes, and a hint of smoke. It is gently sweet and sour, with a moderate bitterness.",
                    "abv": "4.1",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "b63c6a708fdbc915f27e637f1fb6bc411ffa0052",
            "name": "Calverley's",
            "notes": "Cambridge, Cambs est. 2014",
            "products": [
                {
                    "id": "0a643e9d124a1be37965e1e19cf3aaa6ee61a24e",
                    "name": "Best Bitter",
                    "style": "Bitter",
                    "notes": "A smooth amber ale, with a good balance of malt and subtle bittering hops.",
                    "abv": "4.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "7ca15c6f7960b1f1331850d5d2d05f23b4f327a4",
                    "name": "Citra Bitter",
                    "style": "Bitter",
                    "notes": "",
                    "abv": "3.6",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "75d2a5a3c528920d00425f29099eed114b9134e0",
            "name": "Cambridge Brewing Company",
            "notes": "Cambridge, Cambs est. 2013",
            "products": [
                {
                    "id": "1765fcdb53929db2c88d35300ddc2622ddaf9bc7",
                    "name": "King's Parade",
                    "style": "Bitter",
                    "notes": "Classic best bitter. Earthy, spicy, biscuity aroma and sweet malty, but fruity finish. Well-balanced, very drinkable ale.\n",
                    "abv": "3.8",
                    "status_text": "Plenty left"
                },
                {
                    "id": "10e38dfb9188746ed84129990029be2e70aafef6",
                    "name": "Sweet Chariot IPA",
                    "style": "Bitter",
                    "notes": "Pale bitter beer, with a blend of US and UK hops.",
                    "abv": "4.3",
                    "status_text": "Sold Out"
                },
                {
                    "id": "b815f4db4704db2be4965eb84b4fc20ddaa7971b",
                    "name": "Wayne's Brain",
                    "style": "Wheat",
                    "notes": "In the style of a German Hefeweizen, with banana and clove flavours. Naturally cloudy.",
                    "abv": "4.3",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "7320828c9153b2a9848d6bc45d3544236b22fc48",
            "name": "Castor",
            "notes": "Castor, Cambs est. 2009",
            "products": [
                {
                    "id": "cff788778e5a2123e5c18c5039f77bb14ebd9c12",
                    "name": "12th Man",
                    "style": "Golden Ale",
                    "notes": "Amarillo triple-hopped beer with spicy citrus and floral aromas and taste with an orangey finish.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "c2d56260d5eee598e5fc24121ddd47e8df71af38",
                    "name": "Castorware",
                    "style": "Dark Mild",
                    "notes": "Dark, malty, and balanced by interesting hops.",
                    "abv": "4.4",
                    "status_text": "Sold Out"
                },
                {
                    "id": "03ff9e9cb1b99336f12cec39e54b06bdf17b8d73",
                    "name": "Mozart's FinALE",
                    "style": "Bitter",
                    "notes": "Amber-coloured premium bitter with grassy and citrus hop notes.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "4cae599309683b04925ec1cb7d79dfab04709af8",
            "name": "Crafty Beers",
            "notes": "Great Wilbraham, Cambs est. 2012",
            "products": [
                {
                    "id": "9a168595cac8e304082f2af387bc8636e769852c",
                    "name": "Mild Mannered",
                    "style": "Dark Mild",
                    "notes": "A dark mild with a pleasant balance of sweet malt and tempered bitterness.",
                    "abv": "3.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "d6904d72754830c9b13661bde26dec20d6cdc829",
                    "name": "Sauvignon Blonde",
                    "style": "Golden Ale",
                    "notes": "Aromatic golden ale brewed with Nelson Sauvin hops from New Zealand, which create characteristics reminiscent of the Kiwis' most famous wine.",
                    "abv": "4.4",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "b3bf2140cfa214f15ab2fa9fa0d4817cb7dca3ac",
            "name": "Dominion",
            "notes": "Moreton, Essex est. 2012",
            "products": [
                {
                    "id": "350cb6e3afceda1f3e7fed413f3821525a901e7f",
                    "name": "A Mild With No Name",
                    "style": "Dark Mild",
                    "notes": "Dark beer with hints of cherry and currants. Brewed in collaboration with Billericay Brewing Company.",
                    "abv": "6.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "0e8782e0edf7aa7f525084f7e97b3ef099447621",
                    "name": "Yukon Gold 3",
                    "style": "Barley Wine",
                    "notes": "Brewed with 100% Maris Otter pale malt with Bullion and Bramling Cross hops. It is matured in cognac casks and acquires an aroma of oranges and cream. The taste is of sweet malt with a rounded bitterness.",
                    "abv": "9.7",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "cb4e5208b4cd87268b208e49452ed6e89a68e0b8",
            "name": "Downton",
            "notes": "Downton, Wiltshire est. 2003",
            "products": [
                {
                    "id": "e0cc7b71e9bf62b758889fa83aa7335372f79de0",
                    "name": "Elderquad",
                    "style": "Speciality",
                    "notes": "A pale, generously hopped session beer. Hints of sweetness, and a subtle elderflower aroma, provide a terrific balance to the hops.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "42405d7bf8a6c5d1cbf57dd8a4411bdf0b188b58",
            "name": "East London",
            "notes": "London est. 2011",
            "products": [
                {
                    "id": "d30eb7a7d1b96ecee41f6dae9fa489ca3caf990a",
                    "name": "Nightwatchman",
                    "style": "Bitter",
                    "notes": "A warm, smooth, beer, red-tinged in colour and relatively well hopped.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "43a8d246a1fb553328791af19bc347bfd7df7a37",
                    "name": "Orchid",
                    "style": "Dark Mild",
                    "notes": "A mahogany-coloured, slightly sweet a dark mild, lightly spiced with vanilla.",
                    "abv": "3.6",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "da5e0596682ba273067955b008fa4acc159bce0e",
            "name": "Elephant School",
            "notes": "Brentwood, Essex est. 2006",
            "products": [
                {
                    "id": "05e3066e8d6a97bed53351488c31f4c8bab3f607",
                    "name": "Peasants' Revolt",
                    "style": "Bitter",
                    "notes": "New world hopped red ale.",
                    "abv": "4.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "4c45af5811b9bd7f9e4c2415afee61e068962d85",
                    "name": "Smoking Trunks",
                    "style": "Speciality",
                    "notes": "A gently smoked porter style beer but with a twist of tropical fruit hoppy loveliness.",
                    "abv": "5.4",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "c1dfd96eea8cc2b62785275bca38ac261256e278",
            "name": "Elgood's",
            "notes": "Wisbech, Cambs est. 1795",
            "products": [
                {
                    "id": "f4803de182333675877249668404869dd49ca12d",
                    "name": "Apple Wheat",
                    "style": "Wheat",
                    "notes": "Apple juice blended with a Belgian style wheat beer to create a refreshing, slightly carbonated, apple and vanilla beer. The fresh apple aroma combined with a hint of herbs and vanilla helps create a unique taste.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "b2029ba5ea1042d78c96d3888897571eea8c27fa",
                    "name": "Black Dog",
                    "style": "Dark Mild",
                    "notes": "Dryish, complex dark mild. Caramel binds a good cross-section of malt, roast and dark berry fruit flavours and there is a hint of sweetness.",
                    "abv": "3.6",
                    "status_text": "A little remaining"
                },
                {
                    "id": "019a954af7fbddb9f1d38528b0d2a6d328b35039",
                    "name": "Black Eagle Imperial Stout",
                    "style": "Stout",
                    "notes": "Raisins and soft fruit complement roast malt in this warming dark ruby stout. Bittersweet conclusion.",
                    "abv": "8.7",
                    "status_text": "Plenty left"
                },
                {
                    "id": "eac6819d6e578da7ba6eed2a8df7ca3d425246c8",
                    "name": "Cambridge Bitter",
                    "style": "Bitter",
                    "notes": "A mild brown bitter with a good balance of malt and hop character giving a pleasing session drink.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "e6613b4dcb1269650e2d6a45cb1133d73735f516",
                    "name": "Double Swan",
                    "style": "Golden Ale",
                    "notes": "This beer has a floral aroma, refreshing to the taste with good bitterness and a slightly sweet mouthfeel.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "fab19abfc186474354d059987002dfd06da3ddce",
                    "name": "Golden Newt",
                    "style": "Golden Ale",
                    "notes": "A beer with prominent hop character; a blend of Fuggles, Goldings and Cascade has been used in the recipe to bring the delicate hop flavour and aroma to the fore.  The use of Cascade gives a pleasing citrus aroma.",
                    "abv": "4.1",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "7d7116e23efef7292cad5e6f033d9a962708228c",
            "name": "Enville",
            "notes": "Stourbridge, W. Mids est. 1993",
            "products": [
                {
                    "id": "f431d871b0eaf2fd98ebef897dcea83c1afd5b78",
                    "name": "Cherry Blonde",
                    "style": "Fruit",
                    "notes": "A light blonde bitter delicately infused with essence of cherry to produce a Belgian style fruit flavoured beer.",
                    "abv": "4.2",
                    "status_text": "Sold Out"
                },
                {
                    "id": "c267645a02d0901147b7bc4a2b98868cd2e8c1da",
                    "name": "Ginger",
                    "style": "Speciality",
                    "notes": "Made using ginger root extract for a refreshing flavour that is not overpowering.",
                    "abv": "4.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "24fbba633d705b4e5d2a65a5219b21ececccd060",
                    "name": "Nailmaker Mild",
                    "style": "Dark Mild",
                    "notes": "A well-defined hop aroma and underlying sweetness give way to a dry finish.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "1b04f217730b9e677ec7021775bb6c2c8f8ca543",
            "name": "Fat Cat",
            "notes": "Norwich, Norfolk est. 2005",
            "products": [
                {
                    "id": "9aa209a1a53da2ba816c7b911235e5fac2a2a6a2",
                    "name": "Cat No. 3",
                    "style": "Bitter",
                    "notes": "Pale yellow session beer brewed with four pale malt varieties and highly hopped with American Chinook.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "ab165cb90d19598f610a669dfe4798f4cd049a6a",
                    "name": "Meow Mild",
                    "style": "Dark Mild",
                    "notes": "Chestnut coloured mild. Roasted flavours throughout, backed up by fruit and coffee flavours. The hops in the aroma appear again in the aftertaste.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "b3c0730cf3f50613e40561e67c871fdb92820cf9",
            "name": "Fellows",
            "notes": "Cottenham, Cambs est. 2009",
            "products": [
                {
                    "id": "ce50b60c685ba31a1d359a5c68bce9c521fcded2",
                    "name": "Doctor Syntax",
                    "style": "IPA",
                    "notes": "Dark and bitter. An IPA backbone with Munich malt. Heavy on the Summit and Columbus additions right through the boil and dry hopped to give the final punch.",
                    "abv": "6.5",
                    "status_text": "Nearly finished!"
                },
                {
                    "id": "0e63c473dbfea793cd2cb3b22f12fe57d979d39f",
                    "name": "Old Fellow IPA",
                    "style": "IPA",
                    "notes": "Amber in colour. Floral with big hop character, with enough sweetness to balance the bitterness.",
                    "abv": "7.2",
                    "status_text": "Sold Out"
                },
                {
                    "id": "aee0120b4456603e7f1c3ceb7a223ddb8e8ba9a0",
                    "name": "Shy'Ann",
                    "style": "Bitter",
                    "notes": "A golden bitter ale bursting with floral and fruity citrus aromas and flavours. Dry hopped with Cascade and Chinook.",
                    "abv": "5.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "0f975ff3ebfdd04cbb3b8a5612279aa65bf8baae",
                    "name": "Voltaire",
                    "style": "Bitter",
                    "notes": "An American red style ale with six different US hops. Dry hopped for extra bite.",
                    "abv": "5.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "8effee409c625e1a2d8f5033631840e6ce1dcb64",
            "name": "Felstar",
            "notes": "Felsted, Essex est. 2001",
            "products": [
                {
                    "id": "21cb91fe07368a0f6619722b30f4f11916fa53b5",
                    "name": "Peckin' Order",
                    "style": "Lager",
                    "notes": "Amber gold coloured lager with citrus notes. A dry finish with a pinch of spice.",
                    "abv": "5.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "d2d64015f7b956573fb26f45359b9e6c07bc9319",
                    "name": "Rooster Booster",
                    "style": "IPA",
                    "notes": "Strong pale ale brewed with American hops for bitterness and English full cone hops for aroma.",
                    "abv": "5.6",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "ab71032b46410c97eefb49af7d10d8a10796db6a",
            "name": "Five Points",
            "notes": "London est. 2013",
            "products": [
                {
                    "id": "e72e0eb8dcbfddc0a8f0c4bf12f933f748606835",
                    "name": "Hook Island Red",
                    "style": "Bitter",
                    "notes": "A full bodied, aromatic red rye ale brewed with malted barley, 20% rye, and Chinook, Columbus and Simcoe hops.",
                    "abv": "6.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "4c051637660fb0a89798e602cf2ab1d701990f88",
                    "name": "Railway Porter",
                    "style": "Porter",
                    "notes": "A Porter in the classic London style with our own twist. Aromas of chocolate and coffee with hints of caramel, brewed with British East Kent Goldings hops.",
                    "abv": "4.8",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "0bad865a02d82f4970687ffe1b80822b76cc0626",
            "name": "Fyne Ales",
            "notes": "Cairndow, Argyll est. 2001",
            "products": [
                {
                    "id": "193b3437a94374579772f3f1a8c8f08381218bf9",
                    "name": "Highlander",
                    "style": "Porter",
                    "notes": "A dark amber-coloured bittersweet ale with an aroma of caramel malt and a hint of lemon. Tastes of rich caramel malts with a touch of toffee and soft citrus flavours leading to a good bitter hoppy finish.",
                    "abv": "4.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "02c8be94d9fa60afd0e8fab82a7f004105a90bee",
                    "name": "Vital Spark",
                    "style": "Dark Mild",
                    "notes": "A dark ruby red coloured beer with an aroma of berries and roasted malts. Flavours of dark fruity and roast malts develop to a long dry finish. Deliciously drinkable and a real cracker.",
                    "abv": "4.4",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "961cc96ada94bed0d2ff9d76556e8651995d940f",
            "name": "Golden Triangle",
            "notes": "Norwich, Norfolk est. 2012",
            "products": [
                {
                    "id": "ddef3154679cd1e9a16abec462be7099ed03ae6f",
                    "name": "Hop Lobster",
                    "style": "IPA",
                    "notes": "Brewed with East Anglian pale malt and five American hops to give a strong pale beer with big explosive hop notes. ",
                    "abv": "5.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "fdf86517d7eace5c0d1c937acf5652f88dc41f83",
                    "name": "Red Square",
                    "style": "Bitter",
                    "notes": "An American style red ale with a Soviet twist. Three local malts and three American hops combine to give a strong fruity hop aroma with a good malty base leading to a lengthy dry finish.",
                    "abv": "4.6",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "536fb6934062440c464ca2eef82b0be8e6b36cc8",
            "name": "Grain",
            "notes": "Alburgh, Norfolk est. 2006",
            "products": [
                {
                    "id": "b1529f8a5f99bf4c2e9e2bbc2a4163c6aa5fc263",
                    "name": "Blonde Ash",
                    "style": "Wheat",
                    "notes": "Wheat beer with a lemon, clove, and banana nose. Sweet fruity flavour supported by a hoppy bitterness. Caramel appears in a strong finish.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "57a0795d1985cea915f603af209e9d62345dc5f5",
                    "name": "Oak",
                    "style": "Golden Ale",
                    "notes": "This well balanced session beer uses Maris Otter pale ale malt to give a light amber colour, and fermented slowly to give a dry, moreish finish.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "ba79e372dbd5aadecfab2b6bdacce7b9bc35d12c",
                    "name": "Porter",
                    "style": "Porter",
                    "notes": "An old-style porter. Smooth and creamy, with a dark berry flavour.",
                    "abv": "5.0",
                    "status_text": "A little remaining"
                }
            ]
        },
        {
            "id": "cfd1799660639c006d19f3ca7ebd518a1d6e6ca2",
            "name": "Great Heck",
            "notes": "Goole, N. Yorks est. 2008",
            "products": [
                {
                    "id": "4aed363502693d3c34b5b95846a78ba1424b0343",
                    "name": "Amish Mash",
                    "style": "Wheat",
                    "notes": "A German style weizen with the hops of an American IPA. Light, refreshing and extremely fruity as the hops balance the banana and clove notes from the German yeast. Light, refreshing and extemely fruity as the hops balance the banana and clove notes from the german yeast.",
                    "abv": "4.7",
                    "status_text": "Sold Out"
                },
                {
                    "id": "eda965b2ae257c6554c87582ac4c6598ee6db676",
                    "name": "Black Jesus",
                    "style": "IPA",
                    "notes": "A black IPA brewed with biblical quantities of premium American hops and dehusked German roasted malt. Enjoy with chocolate, cold meats or just loaves and fishes.",
                    "abv": "6.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "9109c85a45b703f87f1413a405549a2cea9ab556",
            "name": "Green Jack",
            "notes": "Lowestoft, Suffolk est. 2003",
            "products": [
                {
                    "id": "e22cd461c068aea5dff1c3462214880d76b3e39c",
                    "name": "Baltic Trader",
                    "style": "Stout",
                    "notes": "A rich and fruity export stout with plenty of hop character.",
                    "abv": "10.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "667be543b02294b7624119adc3a725473df39885",
            "name": "Greene King",
            "notes": "Bury St. Edmunds, Suffolk est. 1887",
            "products": [
                {
                    "id": "2168220ee076eb9f68ae251a2974e17eb3e354dc",
                    "name": "Gold Beach",
                    "style": "Lager",
                    "notes": "An easy drinking lager style beer to commemorate the 70th anniversary of the D-Day landings. ",
                    "abv": "5.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "48f817974c37bd37eedff100483631752edb04ad",
                    "name": "XX Mild",
                    "style": "Dark Mild",
                    "notes": "A cask mild traditionally brewed using dark malt to give a sweet and roasted flavour.",
                    "abv": "3.0",
                    "status_text": "A little remaining"
                }
            ]
        },
        {
            "id": "b202977c0fc07e1c6b31961a905395a8ffb23121",
            "name": "Harveys",
            "notes": "Lewes, Sussex est. 1790",
            "products": [
                {
                    "id": "143ad82c245be0610f3b3dc3b0bc94b2db721a3b",
                    "name": "Prince of Denmark",
                    "style": "Porter",
                    "notes": "A strong, dark beer of great complexity and depth.",
                    "abv": "8.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "04e8696e6424c21d717e46008780505d598eb59a",
                    "name": "Sussex Best Bitter",
                    "style": "Bitter",
                    "notes": "Full-bodied brown bitter. A hoppy aroma leads to a good malt and hop balance, and a dry aftertaste.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "10309cbe2800a679343754aa99688bac884f9fac",
            "name": "Highland",
            "notes": "Swannay by Evie, Orkney est. 2006",
            "products": [
                {
                    "id": "d18401b1bb37c5d9297cf16fc43858b4fdb37825",
                    "name": "Orkney Best",
                    "style": "Bitter",
                    "notes": "A very refreshing, easy drinking beer. Hopped with American, Polish and New Zealand hops early and late in the copper.",
                    "abv": "3.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "8c80db8853555f6b384d38e83e3a4b7230a0b392",
                    "name": "The Duke",
                    "style": "IPA",
                    "notes": "Clear golden ale, with citrus aroma and flavours. An Orcadian nod to American IPAs!",
                    "abv": "5.2",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "b6692ea5df920cad691c20319a6fffd7a4a766b8",
            "name": "Hop Back",
            "notes": "Downton, Wilts est. 1987",
            "products": [
                {
                    "id": "7d9f2b80826508a602a2b4adb20e470d5af19529",
                    "name": "Crop Circle",
                    "style": "Bitter",
                    "notes": "The subtle blend of aroma and bittering hops give a crispness on the tongue which is delicately fruity, giving way to some dryness. Brewed gluten free.",
                    "abv": "4.2",
                    "status_text": "Sold Out"
                },
                {
                    "id": "fa988283d77ce82140f0d1d6899e142c0072793e",
                    "name": "Taiphoon",
                    "style": "Speciality",
                    "notes": "A pale gold beer with hints of lemongrass and coriander.",
                    "abv": "4.2",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "12b15c8db6c703fe4c7f4f8b71ca4ead06cca8b5",
            "name": "Hop Studio",
            "notes": "Elvington, York est. 2012",
            "products": [
                {
                    "id": "04021b61b30f38eee2accc53c8fc4ca4ac720ff7",
                    "name": "Obsidian",
                    "style": "IPA",
                    "notes": "A well-structured black IPA with notes of treacle and coffee, balanced by powerful hops that make it rich and palatable.",
                    "abv": "5.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "56770172217653a4ee9ff6f260db4dc5a31eec75",
                    "name": "York",
                    "style": "Bitter",
                    "notes": "A deep copper coloured session ale with loads of berry and orange flavours and a hint of tangerine in the aroma.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "0ade7c2cf97f75d009975f4d720d1fa6c19f4897",
            "name": "Hopshackle",
            "notes": "Market Deeping, Lincs est. 2006",
            "products": [
                {
                    "id": "3c14aeb738248934987e1fe269599529f459bb78",
                    "name": "Firebelly",
                    "style": "IPA",
                    "notes": "Double IPA with a sweet malty background overridden by an abundance of hops.",
                    "abv": "7.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "cf345004f938078ffe50aa1fa85d7a506055c4f3",
                    "name": "Zen",
                    "style": "Bitter",
                    "notes": "Amber brown in colour. Malt and bitter sweet flavours with background toffee and a dry finish.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "5a14ec71168ce0b15c0e9cece3865e308e28e32b",
            "name": "Isle of Skye",
            "notes": "Uig, Isle of Skye est. 1995",
            "products": [
                {
                    "id": "ba926df93cb53489195ce06475d4cb8c21bd312b",
                    "name": "Skye Black",
                    "style": "Porter",
                    "notes": "Dark ale brewed with roast barley and rolled roast Scottish oatmeal, giving an almost stout-like bitterness, smoothed through the addition of pure Scottish heather honey.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "51efc5ba6288161b092e90683f492d6e6b9003d5",
                    "name": "Skye Red",
                    "style": "Bitter",
                    "notes": "Reddish-hued, slightly malty and nutty in character, smooth to the taste.",
                    "abv": "4.2",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "ae694b0755cd5eed5886ec4d8e658bde9639331d",
            "name": "Jo C's",
            "notes": "Fakenham, Norfolk est. 2010",
            "products": [
                {
                    "id": "fd39816994d79b4b2cbc07d6eaaa0864c01239e8",
                    "name": "Knot Just Another IPA",
                    "style": "IPA",
                    "notes": "A golden hoppy bitter, with a good blast of British Bodicea hops.",
                    "abv": "5.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "31f18ad59e1fa08510b5cfba409255a9ecfc85e7",
                    "name": "Norfolk Kiwi",
                    "style": "Golden Ale",
                    "notes": "An easy drinking, lightly hopped straw coloured beer. A blend of English and New Zealand hops.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "2bc4a9de212381b2bbb88945fcc28f65c338b37a",
            "name": "Kissingate",
            "notes": "Lower Beeding, W. Sussex est. 2010",
            "products": [
                {
                    "id": "40f65e3dad2b5d1e3047a2e79ee13e4924fbd2a8",
                    "name": "Chennai",
                    "style": "IPA",
                    "notes": "Background flavours of pale and amber malts are balanced with the resinous bitterness and herbal characteristics of Pacific Gem and Cascade hops.",
                    "abv": "5.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "c6c849993e3127a6175e7768af0b251477dc8619",
                    "name": "Gardenia Mild",
                    "style": "Light Mild",
                    "notes": "A refreshing amber mild with the subtle floral fragrances of an English country garden.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "0f3c97b08484e459263448e551ae79f2d31ca102",
            "name": "Lacons",
            "notes": "Great Yarmouth, Norfolk est. 2013",
            "products": [
                {
                    "id": "5acf33bd8eab6f74fe10e0a09f861239ea5d96bd",
                    "name": "Encore",
                    "style": "Golden Ale",
                    "notes": "Glowing with a pale amber hue, this flavour packed ale leads with delicate fruit aromas, comfortably balancing a dry pine and citrus crescendo of flavour throughout followed by a finish that is long and dry.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "9571a65b798c39d21749b4e4a685239402001213",
                    "name": "Falcon",
                    "style": "Bitter",
                    "notes": "A classic dark bitter with an auburn glint. Elaborately balanced use of hops and malt paves the way to complex flavours which are charming and lightly spiced.",
                    "abv": "4.2",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "f03ac204449806e98d4e390480277e6542c95161",
            "name": "Late Knights",
            "notes": "London est. 2013",
            "products": [
                {
                    "id": "74c54cae17a0b22e5a8ef010cd0fac8f9ddfc8b2",
                    "name": "Hairy Dog Black IPA",
                    "style": "IPA",
                    "notes": "A single hop brew using Apollo hops to produce a hoppy warming black IPA.",
                    "abv": "6.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "5e1dbcd58429da3fa00763bebca75f05a74c51bb",
                    "name": "P.IPA",
                    "style": "IPA",
                    "notes": "An IPA made with three varieties of Polish hops.",
                    "abv": "5.4",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "beba4d5d3ffb8fac7fe5ce87ac1eb2f75c4cd1a2",
            "name": "Liverpool Organic",
            "notes": "Liverpool, Merseyside est. 2009",
            "products": [
                {
                    "id": "a334a5db13acaaa0297a1f524db4a856b2b0fd0a",
                    "name": "24 Carat Gold",
                    "style": "Golden Ale",
                    "notes": "Generously hopped with a bitterness that builds steadily towards a lingering finish with spicey orangey notes.",
                    "abv": "4.2",
                    "status_text": "Sold Out"
                },
                {
                    "id": "c53c713e8cecf9c30d48b4fac7a94c7250681ac2",
                    "name": "Josephine Butler",
                    "style": "Speciality",
                    "notes": "Golden coloured with hints of lemon and elderflower in the taste with a good hoppy finish.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "244abbbefb2362df088c32200ed9e9bb210c0174",
                    "name": "Kitty Wilkinson",
                    "style": "Stout",
                    "notes": "Chocolate and vanilla stout.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "1368d271ae6a831386917603bd1f80b959a5c7dd",
            "name": "Loch Lomond",
            "notes": "Alexandria, Dunbartonshire est. 2011",
            "products": [
                {
                    "id": "52ad87eadfbb05f36a5c4687aae4c621f1f0575d",
                    "name": "Galaxy Trial",
                    "style": "Bitter",
                    "notes": "New beer - description forthcoming",
                    "abv": "5.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "a8bdf3a661e814fdbdeaf7079b645e4c59b2ff9b",
                    "name": "Kessog",
                    "style": "Old Ale",
                    "notes": "This ale is dark in colour with warm spicy flavours.",
                    "abv": "5.2",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "ac2646028f5b8b9bbf7a967f4ac71b8866135211",
            "name": "Lord Conrad's",
            "notes": "Dry Drayton, Cambs est. 2010",
            "products": [
                {
                    "id": "4bcc6482e86281fc69806594a97a6e16c6b0cf6c",
                    "name": "Hedgerow Hop",
                    "style": "Bitter",
                    "notes": "A light amber beer with a kick of bitterness. Wild hops from around Swavesey provide a hoppy nose.",
                    "abv": "3.7",
                    "status_text": "Sold Out"
                },
                {
                    "id": "fdc2bf7c798061b9131383b3f3bc593bc7d35a34",
                    "name": "Slap 'n' Tickle",
                    "style": "Bitter",
                    "notes": "A summer blonde ale. Tickle your fancy with a slap of summer refreshment. This light ale is brewed with a single hop in three stages to give a lasting finish.",
                    "abv": "4.3",
                    "status_text": "Sold Out"
                },
                {
                    "id": "039f2f810d2c4f2631a192e37a58ba1ff8248780",
                    "name": "Zulu Dawn",
                    "style": "Dark Mild",
                    "notes": "Dark with red highlights. Citrus bitterness on a malty base.",
                    "abv": "3.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "329dc1daf9fb9d5e75d687dd9e0740e1c72796c3",
            "name": "Mauldon's",
            "notes": "Sudbury, Suffolk est. 1982",
            "products": [
                {
                    "id": "e0f05ed4fd4ffb1af17b55948173bfe2900cefb4",
                    "name": "Black Adder",
                    "style": "Stout",
                    "notes": "A dark bitter stout. Roast and nut aromas with a fruity balance of hops and dark malt provide an excellent lingering finish.",
                    "abv": "5.3",
                    "status_text": "Some beer remaining"
                },
                {
                    "id": "6e84c05d401d22539a24363164c440f3a0e67ba0",
                    "name": "Lemon Adder",
                    "style": "Bitter",
                    "notes": "Fresh citrus aromas which develop into a balanced, fruity and refreshing flavour, along with a lingering, dry, bitter finish.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "8422051640d7c9a740564eff35fbdce111c6c557",
                    "name": "Silver Adder",
                    "style": "Bitter",
                    "notes": "A light coloured bitter with fine hop and malt combinations giving a refreshing crisp finish.",
                    "abv": "4.2",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "90af7edbfd8a161a7f711504a114aaf5bf597f9f",
            "name": "Mighty Oak",
            "notes": "Maldon, Essex est. 1996",
            "products": [
                {
                    "id": "578fc554ad4ca2870648bf32a9795091dab371b3",
                    "name": "Oscar Wilde",
                    "style": "Dark Mild",
                    "notes": "Roasty dark mild with suggestions of forest fruits and dark chocolate. A sweet taste yields to a more bitter finish.",
                    "abv": "3.7",
                    "status_text": "A little remaining"
                }
            ]
        },
        {
            "id": "6765c043a097743fe613e347c1cd7f770096750d",
            "name": "Mile Tree",
            "notes": "Wisbech, Cambs est. 2012",
            "products": [
                {
                    "id": "08bf6ca3fcdcb44b72fd44694748fab054dab19f",
                    "name": "Fenland Wheat",
                    "style": "Wheat",
                    "notes": "Naturally cloudy wheat beer, brewed using Munich wheat yeast, giving aroma/taste of cloves and ripe banana with a spicy dry finish.",
                    "abv": "4.3",
                    "status_text": "Sold Out"
                },
                {
                    "id": "7736cdc66b65f58839b3b8712a1dfc77f07017f3",
                    "name": "Wellstream",
                    "style": "Bitter",
                    "notes": "Copper brown, full-bodied malty beer with a bitter-sweet finish. Brewed with two English hops, Challenger and East Kent Goldings.",
                    "abv": "4.9",
                    "status_text": "Plenty left"
                }
            ]
        },
        {
            "id": "17ba0791499db908433b80f37c5fbc89b870084b",
            "name": "Milton",
            "notes": "Waterbeach, Cambs est. 1999",
            "products": [
                {
                    "id": "519a4f37f4dac1a4a287b10a7bff18a7e284a2e0",
                    "name": "Lanterne Rouge",
                    "style": "Bitter",
                    "notes": "Bright golden ale. Bold, hoppy aroma, with a full tropical/citrus fruit flavour and a strong bitter finish.",
                    "abv": "6.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "3751d247493039b964ddd24585934e15aaf753bd",
                    "name": "Medusa",
                    "style": "Dark Mild",
                    "notes": "Strong mild. Cocoa, vanilla and fruitcake aromas are backed by a satisfying yet subtle bitterness. Very drinkable.",
                    "abv": "4.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "d1b5f33fcf59bd3e3a2b1a78b1584c2ff3ed67c5",
                    "name": "Minerva",
                    "style": "Golden Ale",
                    "notes": "Golden ale. Brewed with US, NZ and British hops for a powerful hop punch and satisfying bitterness.",
                    "abv": "4.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "23a63310b8e95a3702b44b2f22f3248de1561e88",
                    "name": "Nero",
                    "style": "Stout",
                    "notes": "A satisfying, full-flavoured black brew with a good balance of malt, roast and fruit. Bittersweet flavours carry through to a dry finish.",
                    "abv": "5.0",
                    "status_text": "A little remaining"
                },
                {
                    "id": "bc33ea4e26e5e1af1408321416956113a4658763",
                    "name": "Pegasus",
                    "style": "Bitter",
                    "notes": "Fruit and some hops on the nose lead through into a fine balance of malt, fruit and hops on a bittersweet base. Malt is also present in the long, dry finish.",
                    "abv": "4.1",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "a6f16ab483da9847d431a822e6c85e144dc54f30",
            "name": "Moonshine",
            "notes": "Fulbourn, Cambs est. 2004",
            "products": [
                {
                    "id": "79c48bd91a34f149ce5a4bd91df64b8acb06e5a6",
                    "name": "Cambridge Best Bitter",
                    "style": "Bitter",
                    "notes": "Fruity notes give way to a lasting, biscuit malt finish in this pale copper, easy-drinking ale.",
                    "abv": "4.1",
                    "status_text": "Sold Out"
                },
                {
                    "id": "8db77539232c36216e93b2fe14526d36971af87b",
                    "name": "Cambridge Pale Ale",
                    "style": "Bitter",
                    "notes": "Straw coloured beer with a smooth malt profile which is complemented by a restrained hop flavour.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "5f7a14b2d12ab2c466a00d9a3dee2c1dddeae81b",
                    "name": "Heavenly Matter",
                    "style": "Golden Ale",
                    "notes": "A refreshing golden session bitter, with a fresh citrus taste and a lovely finish of citrus fruits.",
                    "abv": "4.1",
                    "status_text": "Sold Out"
                },
                {
                    "id": "61e956557df54b76803f7e8e0e2cf486e5127f48",
                    "name": "Hot Numbers Coffee Stout",
                    "style": "Stout",
                    "notes": "Made with the cooperation of Hot Numbers Coffee of Cambridge.  Dark roasted malts balance the coffee and hop flavours, lactose adds sweetness to the body.",
                    "abv": "5.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "ba613d1fc0d9300175611e31cca7cf9f525056cb",
                    "name": "Red Watch Blueberry Ale",
                    "style": "Fruit",
                    "notes": "A red-coloured beer brewed with fresh blueberries. A thirst-quenching, refreshing, fruity ale.",
                    "abv": "4.2",
                    "status_text": "Sold Out"
                },
                {
                    "id": "177fece697d92de3404eda71739595836edadc4e",
                    "name": "You Can Bike Too",
                    "style": "Bitter",
                    "notes": "",
                    "abv": "4.3",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "17503a6b2326f09fbc4e3a7c03874c7333002038",
            "name": "Moor",
            "notes": "Pitney, Somerset est. 1996",
            "products": [
                {
                    "id": "ab49f7673a310014d59e742b3827d27ee0674f1c",
                    "name": "Old Freddy Walker",
                    "style": "Old Ale",
                    "notes": "A rich, dark, full-bodied old ale. Bramling Cross hops are added to provide a hint of orange and a balancing dose of bitterness.",
                    "abv": "7.3",
                    "status_text": "A little remaining"
                },
                {
                    "id": "85f6ad09126916b8e6c4278f4f1907a0233b8a2d",
                    "name": "Revival",
                    "style": "Bitter",
                    "notes": "A very hoppy and refreshing bitter with a crisp finish and full flavour.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "8e63fd3e77796b102589b1ba1e4441c7982e4132",
            "name": "New Plassey",
            "notes": "Eyton, Clwyd est. 2012",
            "products": [
                {
                    "id": "d8cda6680f79990514b867f4e66e5df7e9429120",
                    "name": "Midnight Mild",
                    "style": "Dark Mild",
                    "notes": "A medium strength mild with a real fullness of character and flavour. Dark and subtle.",
                    "abv": "4.2",
                    "status_text": "A little remaining"
                }
            ]
        },
        {
            "id": "fb644351560d8296fe6da332236b1f8d61b2828a",
            "name": "Oakham",
            "notes": "Peterborough, Cambs est. 1993",
            "products": [
                {
                    "id": "994f1a11ea803d70dff540f902f55ec37b733e0b",
                    "name": "Bishops Farewell",
                    "style": "Golden Ale",
                    "notes": "A strong premium beer of structured quality, dominated by elaborate fruity hop notes, with a grainy background and dry finish. ",
                    "abv": "4.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "b1232a902df44cc665d294651d69ef78674e1575",
                    "name": "Gangster",
                    "style": "Bitter",
                    "notes": "Ruby coloured with a rich, sweet base and powerful citrus fruit flavour with a lasting bitterness. Hopped with Simcoe, Galena and Apollo.",
                    "abv": "4.9",
                    "status_text": "Sold Out"
                },
                {
                    "id": "616a3e98d92f30bc19f49c0e0b36e685568a4c32",
                    "name": "Paranoid",
                    "style": "Bitter",
                    "notes": "Rose gold beer with fresh hop aromas. Big bitter character wrestles with a hoppy fruit monster. With no outright winner, they fight on to the finish.",
                    "abv": "5.2",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "7698330419d7539e743e9f4985411faf76e64261",
            "name": "Oates",
            "notes": "Halifax, W. Yorks est. 2012",
            "products": [
                {
                    "id": "d2866e8ed62520e316a6f55fd62b2e06f088a03e",
                    "name": "Saison",
                    "style": "Speciality",
                    "notes": "Medium cloudy and apricot coloured, with lemon peel on the nose. Flavours include shrivelled lime, cream cheese and coriander notes, sherbet and herb.",
                    "abv": "4.2",
                    "status_text": "Some beer remaining"
                }
            ]
        },
        {
            "id": "170377543ef02d8082756be316e863c382a1d1bc",
            "name": "Old Dairy",
            "notes": "Cranbrook, Kent est. 2010",
            "products": [
                {
                    "id": "df7ab41ae5c3578117be2af9c21d36fd83c7e594",
                    "name": "Gold Top",
                    "style": "IPA",
                    "notes": "Combining Maris Otter, the best British ale malt, with malts normally used in the finest continental lagers gives a beer with good body, caramelised undertones and a distinct gold colour.",
                    "abv": "4.3",
                    "status_text": "Sold Out"
                },
                {
                    "id": "3a5c91ed3507e0f6e8c1e0c40e9311269ae71f11",
                    "name": "Red Top",
                    "style": "Bitter",
                    "notes": "A rich tan-coloured beer that is balanced on the palate, with a hint of citrus aroma. It shows all the characteristics of best English bitter.",
                    "abv": "3.8",
                    "status_text": "Some beer remaining"
                },
                {
                    "id": "2921c42d10b9c5064817ffa6505bf57dfde51d95",
                    "name": "Silver Top",
                    "style": "Stout",
                    "notes": "A well-crafted complex stout with a good balance of dark malts, roast barley and caramel, and a long finish.",
                    "abv": "4.5",
                    "status_text": "Plenty left"
                }
            ]
        },
        {
            "id": "9d8974baddfc0e53300829f37e5fc88b0f5ce61b",
            "name": "Opa Hay's",
            "notes": "Aldeby, Suffolk est. 2008",
            "products": [
                {
                    "id": "6996a50aca5f29ff94444f9d1619b9b03e004525",
                    "name": "Fruity Little Number",
                    "style": "Fruit",
                    "notes": "A session bitter loaded with citrus hops.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "60f77118dcf9d8c215bf416a958a05d8a8b92fbe",
                    "name": "Maibock",
                    "style": "Old Ale",
                    "notes": "A rong German spring ale brewed with Bacarian yeast and Munich malt, hoppy and malty.",
                    "abv": "7.0",
                    "status_text": "A little remaining"
                },
                {
                    "id": "367ac64a16d19e2afefcf7c5fab8666dda92f9de",
                    "name": "Samuel Engel Meister Pils",
                    "style": "Lager",
                    "notes": "A Pilsner style beer with German Hallertau Hops. Light in colour and with a hoppy aroma.\n",
                    "abv": "4.8",
                    "status_text": "A little remaining"
                }
            ]
        },
        {
            "id": "08a35293e09f508494096c1c1b3819edb9df50db",
            "name": "Orkney",
            "notes": "Quoyloo, Orkney est. 1988",
            "products": [
                {
                    "id": "4b19229e380e9ca29673fdb967fd09cdcf4b5b44",
                    "name": "Dark Island",
                    "style": "Stout",
                    "notes": "Roast malt and chocolate character with hints of fruit. A sweetish roast malt taste leads to a long-lasting roasted, slightly bitter, dry finish.",
                    "abv": "4.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "5378c3d8a9417d31d1abdb3da9ffb909420656eb",
                    "name": "Red MacGregor",
                    "style": "Bitter",
                    "notes": "Generally a well-balanced bitter, this tawny red ale has a powerful smack of fruit and a clean, fresh mouthfeel.",
                    "abv": "4.0",
                    "status_text": "Some beer remaining"
                },
                {
                    "id": "715e82fa3b623c04f4eb343985dbbe7555a0be99",
                    "name": "Skull Splitter",
                    "style": "Barley Wine",
                    "notes": "An aroma of fruity malt with hints of dark fruit, spicy hop, dates and figs. Rich and complex palate with sweet toasted malt, molasses, fruit and hints of spice.",
                    "abv": "8.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "25250e46745c8169531da0086e6bbc3369795330",
            "name": "Otter",
            "notes": "Luppitt, Devon est. 1990",
            "products": [
                {
                    "id": "4080612570be15e797c5dae4449e556f77faa2fa",
                    "name": "Amber",
                    "style": "Bitter",
                    "notes": "The special Cara malt and carefully selected hops in Amber deliver a finely balanced bitter flavour, with hints of tropical fruit and spice sometimes even an impression of ginger.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "25c65868b540200530fe4d75eb95a9a92c0c76ce",
                    "name": "Bitter",
                    "style": "Bitter",
                    "notes": "Light and fruity beer with a dry, hoppy finish.",
                    "abv": "3.6",
                    "status_text": "Plenty left"
                },
                {
                    "id": "dc1e5e97b303462f6c9a009994f17fb83d9f7624",
                    "name": "Head",
                    "style": "Old Ale",
                    "notes": "Malt and fruit sweet flavours give way to a long bittersweet aftertaste. Well balanced aroma reflects its taste. Deep red brown in colour.",
                    "abv": "5.8",
                    "status_text": "Plenty left"
                }
            ]
        },
        {
            "id": "5715aa02de07dc08f6197a5850b92d7640766663",
            "name": "Panther",
            "notes": "Reepham, Norfolk est. 2010",
            "products": [
                {
                    "id": "62859f4918faecdc01889adba16696d6aa1cc68c",
                    "name": "Ginger Panther",
                    "style": "Speciality",
                    "notes": "Fiery with a ginger flavour and with subtle lemon flavour notes.",
                    "abv": "3.7",
                    "status_text": "Sold Out"
                },
                {
                    "id": "d2928bd0a8fbe3383aec8081c03f6aca4a229455",
                    "name": "Red Panther",
                    "style": "Bitter",
                    "notes": "A beer with roasted nutty flavour and bitter spicy malts.",
                    "abv": "4.1",
                    "status_text": "A little remaining"
                }
            ]
        },
        {
            "id": "89f549b2a5341a05a7e4afeb364599158a03a47f",
            "name": "Poppyland",
            "notes": "Cromer, Norfolk est. 2012",
            "products": [
                {
                    "id": "31daef3db66d0c0f488ab44ca2bcc1875d84d412",
                    "name": "East Coast IPA",
                    "style": "IPA",
                    "notes": "An American IPA. North Norfolk Maris Otter malt with lots of New World hops, dry hopped with Columbus. Fruity, resinous and bitter. Gluten-free.",
                    "abv": "7.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "ba717e2281eddd1ee5b2a63300d5de28d4ae0f6a",
                    "name": "Stewkey Gose",
                    "style": "Wheat",
                    "notes": "A wheat beer inspired by the salt marshes of Stiffkey, North Norfolk. Made with foraged ingredients -- sea purslane, wild hops, with alexanders, fennel and coriander spices and salt. Sour and salty. Gluten-free.",
                    "abv": "4.7",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "4b1a62d54f5d635ceffa0118244d63e07779e04a",
            "name": "Portobello",
            "notes": "London est. 2012",
            "products": [
                {
                    "id": "b2423be44089295e0dc9bcb993e0630e067768df",
                    "name": "American Pale Ale",
                    "style": "IPA",
                    "notes": "Maris Otter Pale Malt gives a pale-golden, rich malty base with Citra, Amarillo and Summit late additions yielding a well-balanced hop flavour and aroma of tropical fruits, orange and pink grapefruit.",
                    "abv": "5.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "6bfdf0413ea7dac5a5f8f90f1484a240e6587844",
                    "name": "Market Porter",
                    "style": "Porter",
                    "notes": "Aromas of cappuccino, chocolate, dark fruits and vibrant fresh peel. Velvety and rich, with notes of coffee, chocolate and hazelnuts with warming alcohol and cocoa in the finish.",
                    "abv": "4.6",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "ef7de0b7dedde0a2722380a752fece7a2ccdd672",
            "name": "Purple Moose",
            "notes": "Porthmadog, Gwynedd est. 2005",
            "products": [
                {
                    "id": "b1d2e166d988e74123924d7bff9cd30a63aff067",
                    "name": "Snowdonia",
                    "style": "Bitter",
                    "notes": "A delightfully refreshing pale ale brewed with a delicate combination of aromatic hops.",
                    "abv": "3.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "0502b504710c7cb9ea2f7b3a8200b24bf160b7df",
                    "name": "Ysgawen",
                    "style": "Golden Ale",
                    "notes": "A refreshing pale ale brewed using Cascade hops with the added indulgence of elderflowers.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "97705a95fdc2a4886f9b24061803f0f5c60270cb",
            "name": "Saffron",
            "notes": "Henham, Essex est. 2006",
            "products": [
                {
                    "id": "f5b34b11d14443f4c2e1ef4608aee8f90e4c3106",
                    "name": "Citurian",
                    "style": "Golden Ale",
                    "notes": "Light golden ale with grapefruit aromas and a gooseberry finish.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "8766486fdc50fdbfffd5df9bea38fb731627271b",
                    "name": "Royal Blue",
                    "style": "Bitter",
                    "notes": "Traditional style ale, malty with mellow sweet citrus tones.",
                    "abv": "4.1",
                    "status_text": "Sold Out"
                },
                {
                    "id": "19afca7482367f22ec3f418a04029acb1ab6b325",
                    "name": "Saffron Blonde",
                    "style": "Golden Ale",
                    "notes": "Light golden ale. Maris Otter barley and torrified wheat, plus Fuggles and Goldings hops create a delicate balance of citrus and smooth malty flavours.",
                    "abv": "4.3",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "267b976f6f335984ab90f0f478e8a1637eabe7d5",
            "name": "Saltaire",
            "notes": "Shipley, West Yorks est. 2006",
            "products": [
                {
                    "id": "297230edddbf1138dc92892cd059dfe43b4defc7",
                    "name": "Dockfield Porter",
                    "style": "Porter",
                    "notes": "Classic reddish black porter with roast malt aroma, chocolate and nut flavours and a spicy bitterness from Bramling Cross hops.",
                    "abv": "5.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "dd5c0df425dc1f746de524edd1e83e00b6bb89c7",
                    "name": "Raspberry Blonde",
                    "style": "Fruit",
                    "notes": "Refreshingly blonde ale delicately infused with raspberry flavours.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "6d93f2a0e5f0fe2cc3a6e9e3ade964b43b07f897",
            "name": "Shalford",
            "notes": "Braintree, Essex est. 2007",
            "products": [
                {
                    "id": "bc1a73ffba838f9263e05db6eefe1bf5d7cf636e",
                    "name": "1319 Mild",
                    "style": "Dark Mild",
                    "notes": "Roast malt and delicate chocolate sweetness with a slight bitter finish.",
                    "abv": "3.7",
                    "status_text": "Sold Out"
                },
                {
                    "id": "eb550440e0da10838690e0f110e0fd0796f76c71",
                    "name": "Rotten End",
                    "style": "Bitter",
                    "notes": "Traditional coloured and strong, accompanied by a slightly sweet and nutty undertone with a bitter edge to finish.",
                    "abv": "6.5",
                    "status_text": "A little remaining"
                }
            ]
        },
        {
            "id": "348763862f0a868bdc2591812b783206c351bc2f",
            "name": "Skinner's",
            "notes": "Truro, Cornwall est. 1997",
            "products": [
                {
                    "id": "25b2a5ab2ff3c521ffe609963643944e40c7b4b0",
                    "name": "Lushingtons",
                    "style": "Golden Ale",
                    "notes": "Using only Cornish pale malt and hops from the USA, this is a new world style hoppy, fruity pale ales, but at a session strength.",
                    "abv": "4.2",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "f1abd670358e036c31296e66b3b66c382ac00812",
            "name": "Son of Sid",
            "notes": "Little Gransden, Cambs est. 2007",
            "products": [
                {
                    "id": "7025610b8c46b5974ed2ee97a6ce7d049505fa2a",
                    "name": "Chocolate Cherry",
                    "style": "Fruit",
                    "notes": "Smooth, well balanced stout with a subtle cherry taste.",
                    "abv": "5.1",
                    "status_text": "Sold Out"
                },
                {
                    "id": "5b384ce32d8cdef02bc3a139d4cac0a22bb029e8",
                    "name": "Muck Cart Mild",
                    "style": "Dark Mild",
                    "notes": "Smooth dark mild with a long liquorice finish. Roast and fruit aroma, with chocolate and coffee taste, and lingering roast finish.",
                    "abv": "3.5",
                    "status_text": "Plenty left"
                },
                {
                    "id": "eee440bfbe0801ec3f533f897c1d55e6a5afd5cd",
                    "name": "Raspberry Wheat",
                    "style": "Fruit",
                    "notes": "The Raspberry Pi is the computing phenomenon of Cambridge and this wheat beer is the raspberry phenomenon of Cambridgeshire. The sourness of the wheat is balanced by the raspberries, leading to a refreshing beer.",
                    "abv": "5.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "0716d9708d321ffb6a00818614779e779925365c",
            "name": "St. Peter's",
            "notes": "St. Peter South Elmham, Suffolk est. 1996",
            "products": [
                {
                    "id": "fda4df15eb473861c82afb477c14a50c8054206d",
                    "name": "Dark G-free",
                    "style": "Speciality",
                    "notes": "Suffolk grown, Sovereign bittering hops provide the floral notes for this full bodied gluten-free beer.",
                    "abv": "3.9",
                    "status_text": "Sold Out"
                },
                {
                    "id": "af5c4b77feed3949e12c926f76c381007519e3d3",
                    "name": "G-Free",
                    "style": "Speciality",
                    "notes": "A clean, crisp gluten free ale with a pilsner style lager finish and aromas of citrus and mandarin from American Amarillo hops.",
                    "abv": "4.2",
                    "status_text": "Sold Out"
                },
                {
                    "id": "85f1002bf139bebdb7f0d07b31fa14155aea9dfc",
                    "name": "Grapefruit",
                    "style": "Fruit",
                    "notes": "We use our Wheat Beer as a base for this superbly refreshing beer. The zesty/pithy grapefruit is in complete harmony with the hops and malt. Excellent as an apéritif or as a refreshing change.",
                    "abv": "4.7",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "e1c1bfebab6bf67d6a890159995b9edf156ac725",
            "name": "Star",
            "notes": "Market Deeping, Lincs est. 2012",
            "products": [
                {
                    "id": "5a842fbfcef26b71a2da9ae23551b0783ac5eddf",
                    "name": "Comet",
                    "style": "Bitter",
                    "notes": "Pale, straw coloured refreshing session bitter that combines English barley and three American hop varieties. Zesty bitterness with citrus aromas.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                },
                {
                    "id": "5ad25c52c1223269008238ab4fd48ba647886066",
                    "name": "Sirius",
                    "style": "IPA",
                    "notes": "Golden in colour and full bodied with moderate sweetness and alcohol, balanced by generous hopping using cascade, chinook and other new world varieties.",
                    "abv": "5.2",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "097ccd4f03d962011101c1221009e53461a0993f",
            "name": "Thornbridge",
            "notes": "Bakewell, Derbyshire est. 2004",
            "products": [
                {
                    "id": "3a085d1bc5fa41313c4e0910e7341af761b0f7db",
                    "name": "Jaipur",
                    "style": "IPA",
                    "notes": "A citrus-dominated India Pale Ale, its immediate impression is soft and smooth yet builds to a crescendo of massive hoppiness accentuated by honey. An enduring, bitter finish.",
                    "abv": "5.9",
                    "status_text": "Sold Out"
                },
                {
                    "id": "de5f4d63e99977a60bee1c8bd77cf91fe4f4c8ef",
                    "name": "Kipling",
                    "style": "Golden Ale",
                    "notes": "Golden blonde beer with an exquisite passionfruit, gooseberry and mango aroma. An initial sweetness and full body are balanced by a lasting grapefruit-like bitter finish.",
                    "abv": "5.2",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "8383da94fbc3893a50deddfd249fa33c22a1d215",
            "name": "Three Blind Mice",
            "notes": "Little Downham, Cambs est. 2014",
            "products": [
                {
                    "id": "60a716b58e52e35e42cfa1f1f0261fdf9ed54e53",
                    "name": "Chopper",
                    "style": "Bitter",
                    "notes": "Light refreshing pale ale. A single hop beer made with Chinook hops.",
                    "abv": "4.3",
                    "status_text": "Sold Out"
                },
                {
                    "id": "fc063a2cfe026a34de3996e07c68111c1a232ba8",
                    "name": "Pale Ale No. 1",
                    "style": "Bitter",
                    "notes": "Well balanced and hoppy with citrus notes. Brewed with Maris Otter and lager malts and Amarillo hops.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "f8e20fddd3e45ed2936ab88dd39d7ae2466b21ed",
            "name": "Tom Smith Ales",
            "notes": "Kettering, Northants est. 2012",
            "products": [
                {
                    "id": "4c00ef5491a867fdbd9000315ffc9e13a3c20049",
                    "name": "Goat Sanctuary",
                    "style": "Bitter",
                    "notes": "Very pale, straw coloured, very dry and hoppy beer.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "9c12a91a195395bc7e7335b3d9938f87acc46112",
                    "name": "Tom's Tipple",
                    "style": "Dark Mild",
                    "notes": "Chocolate flavours, sweetness well balanced with Fuggles bittering hop.",
                    "abv": "3.5",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "89c48c47268eee4dcf7c4d1629c9876f49285cfb",
            "name": "Truman's",
            "notes": "London est. 2010",
            "products": [
                {
                    "id": "aaaa7ef33feb7e761b20b15a0d2cb6541959bad5",
                    "name": "Runner",
                    "style": "Bitter",
                    "notes": "A dark copper bitter brewed with three different types of hops and five types of malt.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "6afc08b3381a1db86dde71711d646a824a313963",
                    "name": "Swift",
                    "style": "Golden Ale",
                    "notes": "Brewed with both lager (Saaz) and ale (Cascade) hops for the perfect blend of flavour and refreshment. Juicy, gently hoppy and mellow.",
                    "abv": "3.9",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "af3e133428b9e25c55bc59fe534248e6a0c0f17b",
            "name": "Tydd Steam",
            "notes": "Tydd St. Giles, Cambs est. 2007",
            "products": [
                {
                    "id": "32ec76b70cc58bc6aada444529c4b71e1d890c9b",
                    "name": "Learning to Fly",
                    "style": "Golden Ale",
                    "notes": "Light in colour. Clean and dry with citrus flavours.",
                    "abv": "4.0",
                    "status_text": "Sold Out"
                },
                {
                    "id": "411aeb8d23ec680f9576ce8e9163866bb597c790",
                    "name": "Sandman",
                    "style": "Bitter",
                    "notes": "Deep golden strong bitter. Boldly hopped, predominantly with Australian Galaxy hops, importing clean citrus flavours and aroma of passion fruit.",
                    "abv": "5.0",
                    "status_text": "Sold Out"
                }
            ]
        },
        {
            "id": "11307768e6d77951256a33cc9abd40851f6f5ce8",
            "name": "Wibblers",
            "notes": "Mayland, Essex est. 2007",
            "products": [
                {
                    "id": "fee055b039d2e9ce3396eeecb5d34a5659678326",
                    "name": "Crafty Stoat",
                    "style": "Stout",
                    "notes": "Made to a recipe developed by the Durden Park Beer Circle to recreate a stout brewed by Ushers in 1885. Six different malts and a huge amount of English Fuggles make a dark and complex beer.",
                    "abv": "5.3",
                    "status_text": "Nearly finished!"
                },
                {
                    "id": "4c17fdedd991582eef6f1f3329f865f8c0c9ca8c",
                    "name": "Hop Black",
                    "style": "IPA",
                    "notes": "Dark Ale with lots of hoppy bitterness, dark in colour but with a floral aroma.",
                    "abv": "4.0",
                    "status_text": "Plenty left"
                }
            ]
        },
        {
            "id": "2eab55ee69163f8454c57d780d7e9dbba68f2b0d",
            "name": "Wild Beer",
            "notes": "Westcombe, Somerset est. 2012",
            "products": [
                {
                    "id": "2924183df35e33c0315e3c445c7972a2770b7fdd",
                    "name": "Fresh",
                    "style": "Golden Ale",
                    "notes": "A pale ale made with new-harvest Northern and Southern hemisphere hops. A punchy hop character alongside an appetising bitterness and a crisp dry finish.",
                    "abv": "5.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "969f3112733ec6789a5bc6a52234bda5ab9dd935",
                    "name": "Scarlet Fever",
                    "style": "Bitter",
                    "notes": "Citrus and floral notes from aromatic New World hops balance the smooth caramel and bready sweetness of traditional English malts, before a long, crisp citrus finish.",
                    "abv": "4.8",
                    "status_text": "Plenty left"
                }
            ]
        },
        {
            "id": "6b6277afcb65d33525545904e95c2fa240632660",
            "name": "Winter's",
            "notes": "Norwich, Norfolk est. 2001",
            "products": [
                {
                    "id": "2a8428f5a79b09aadff75a745397cf6d2f59d51e",
                    "name": "Geniuss",
                    "style": "Stout",
                    "notes": "A full-bodied stout made with chocolate and caramalts to give a roasted flavour with a hint of liquorice with some brambly fruit.",
                    "abv": "4.1",
                    "status_text": "Plenty left"
                },
                {
                    "id": "d7c1f0dd609c0024d00c7eb35743bcc476459876",
                    "name": "Revenge",
                    "style": "Bitter",
                    "notes": "Amber coloured and well-hopped, for a distinct bitterness with a sweetish finish that makes this a warmer beer.",
                    "abv": "4.7",
                    "status_text": "Some beer remaining"
                }
            ]
        },
        {
            "id": "97b31c942deab39118e64423efe46b9c31e669f7",
            "name": "Wold Top",
            "notes": "Wold Newton, E. Yorks est. 2003",
            "products": [
                {
                    "id": "053cb89d892349df452b86124fa935794bd6a4cb",
                    "name": "Against the Grain",
                    "style": "Speciality",
                    "notes": "A full flavoured gluten-free bitter with a good, creamy head, refreshing bitterness and a citrus hop aftertaste.",
                    "abv": "4.5",
                    "status_text": "Plenty left"
                },
                {
                    "id": "ac0a494b56f2d9b74ebc41e382147cdb3e989698",
                    "name": "Mallard",
                    "style": "Bitter",
                    "notes": "Refreshing, easy drinking beer with a fruity bitterness and a lingering, dry finish.",
                    "abv": "4.0",
                    "status_text": "A little remaining"
                }
            ]
        },
        {
            "id": "b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f",
            "name": "Woodforde's",
            "notes": "Woodbastwick, Norfolk est. 1981",
            "products": [
                {
                    "id": "9041266f061eb754571336358ed8b599c086e7e3",
                    "name": "Bure Gold",
                    "style": "Golden Ale",
                    "notes": "A classic aromatic golden ale brewed using pale and lightly roasted malts in combination with American and Slovenian aroma hops.",
                    "abv": "4.3",
                    "status_text": "Sold Out"
                },
                {
                    "id": "ab775fca5d031ae19761afa4014f3ec1d44df380",
                    "name": "Craft Lager",
                    "style": "Lager",
                    "notes": "Continental style lager brewed using Norfolk grown lager malt and German Hallertau Blanc and Perle hops, creating a lager with real flavour. Fermented slowly at a lower temperature.",
                    "abv": "4.1",
                    "status_text": "Sold Out"
                },
                {
                    "id": "08575848ba29f7005356841f87e0a89e9a5327c6",
                    "name": "Flagon Dry",
                    "style": "Golden Ale",
                    "notes": "A highly aromatic and easy drinking ale, brewed using Norfolk grown and malted Maris Otter supplemented with finest Norfolk honey. A combination of Styrian Golding and Nelson Sauvin hops provide a memorable drinking experience.",
                    "abv": "3.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "0159a99ed28b0581890608d24ada9decc4874197",
                    "name": "Nelson's Revenge",
                    "style": "Bitter",
                    "notes": "An infusion of vine fruit, malt and hops provide a rich, rewarding experience. The aromas and flavours bounce merrily along to a sweet, Madeira-like finale.",
                    "abv": "4.5",
                    "status_text": "Sold Out"
                },
                {
                    "id": "2e01e17467891f7c933dbaa00e1459d23db3fe4f",
                    "name": "Norfolk Nog",
                    "style": "Old Ale",
                    "notes": "Smooth, rich and rounded 'Old Ale' with velvety texture and hints of chocolate, treacle and liquorice.",
                    "abv": "4.6",
                    "status_text": "Sold Out"
                },
                {
                    "id": "e1822db470e60d090affd0956d743cb0e7cdf113",
                    "name": "Wherry",
                    "style": "Bitter",
                    "notes": "Fresh and zesty with crisp floral flavours. A background of sweet malt and a hoppy 'grapefruit' bitter finish this champion bitter.",
                    "abv": "3.8",
                    "status_text": "Sold Out"
                }
            ]
        }
    ],
    "timestamp": "2014-05-25 16:59:13"
}
</string>
</resources>
